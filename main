#include <iostream>
#include <time.h>
#include <locale.h>
#include <algorithm>
#include <conio.h>
#include <stdlib.h>
#if __linux__ || _POSIX_VERSION
#define CLEAR "clear"
#define PAUSE "read _"
#elif _WIN32 || _WIN64
#define CLEAR "cls"
#define PAUSE "pause"
#endif

void escolhaMenu(int& escolha) {
    std::cout << "*===============================*" << std::endl;
    std::cout << "| B R A S I L  -  S U R V I V E | " << std::endl;
    std::cout << "*===============================*" << std::endl;
    std::cout << "*==============*" << std::endl;
    std::cout << "| 1 - Jogar   |" << std::endl;
    std::cout << "| 2 - Sobre   |" << std::endl;
    std::cout << "| 3 - Sair    |" << std::endl;
    std::cout << "*==============*" << std::endl << std::endl;
    std::cout << " Sua escolha:  ";
    std::cin >> escolha;
}


const int caminho = 46, pedra = 127, Jog01 = 5, Inimig01 = 21;

struct Arma {
    int Dmin;
    int Dmax;
};

struct Jogador {
    std::string nome;
    int posX;
    int posY;
    int vida;
    Arma arma;
};

struct Inimigo {
    std::string nome;
    int vida;
    Arma arma;
};

struct Bloco {
    int caminho;
    Inimigo* PonteiroInimigo;
};

struct Mapa {
    Bloco** bloco;
    int EixoX;
    int EixoY;
};

struct Fase {
    std::string nome;
    Mapa mapa;
    int NumOponentes;
    Inimigo* inimigo;
};

Jogador escolha_jogador() {

    Jogador debora;
    std::cout << "*===============================*" << std::endl;
    std::cout << "Escolha o nome do seu personagem: " << std::endl;
    std::cout << "*===============================*" << std::endl;
    std::cin >> debora.nome;
    system(CLEAR);

    debora.posX = 0;
    debora.posY = 0;
    debora.vida = 300;
    debora.arma.Dmin = 10;
    debora.arma.Dmax = 30;
    return debora;
}

void sobre() {
    std::cout << "*===============================*" << std::endl;
    std::cout << "| B R A S I L  -  S U R V I V E | " << std::endl;
    std::cout << "*===============================*" << std::endl << std::endl;

    std::cout << "*==============================================================*" << std::endl;
    std::cout << "|                                                              |" << std::endl;
    std::cout << "| O jogo Brasil Survive eh um RPG que se situa no Brasil.      |" << std::endl;
    std::cout << "| No decorrer do jogo, voce enfrentara 5 inimigos, cujos podem |" << std::endl;
    std::cout << "| ser observados diariamente em situacoes no Brasil.           |" << std::endl;
    std::cout << "|                                                              |" << std::endl;
    std::cout << "*==============================================================*" << std::endl << std::endl;

    std::cout << "*==========================================*" << std::endl;
    std::cout << "|   Algoritmos e Programacao II - 2022.1   |" << std::endl;
    std::cout << "|                                          |" << std::endl;
    std::cout << "|             Professor:                   |" << std::endl;
    std::cout << "|            Rodrigo Lyra                  |" << std::endl;
    std::cout << "|                                          |" << std::endl;
    std::cout << "|              Alunos:                     |" << std::endl;
    std::cout << "|    Cesar Pereira  e Deborah  Heinig      |" << std::endl;
    std::cout << "*==========================================*" << std::endl << std::endl;
}

Mapa CriarMapa(int EixoX, int EixoY) {
    Mapa mapa;

    mapa.EixoX = EixoX;
    mapa.EixoY = EixoY;
    mapa.bloco = new Bloco * [EixoX];

    for (int i = 0; i < EixoX; i++) {
        mapa.bloco[i] = new Bloco[EixoY];
    }
    for (int i = 0; i < EixoX; i++) {
        for (int j = 0; j < EixoY; j++) {
            int n = rand() % 5;
            if (n == 0) {
                mapa.bloco[i][j].caminho = pedra;
            }
            else {
                mapa.bloco[i][j].caminho = caminho;
            }
        }
    }
    mapa.bloco[0][0].caminho = pedra;

    return mapa;
}

Inimigo* escolherInimigos(int NumOponentes) {
    Inimigo* p_inimigo = new Inimigo[NumOponentes];
    std::string nomes[5] = { "Golem", "Arara", "Bandido", "Coveiro","Pedreiro" };

    for (int i = 0; i < NumOponentes; i++) {
        p_inimigo[i].nome = nomes[rand() % 5];
        p_inimigo[i].vida = 50;
        p_inimigo[i].arma.Dmin = 10 + rand() % 10;
        p_inimigo[i].arma.Dmax = 10 + rand() % 20;
    }

    return p_inimigo;
}

Fase CriarFase(int numInimigos, Inimigo* inimigo, int alturaMapa, int larguraMapa) {
    Fase fase;

    fase.mapa = CriarMapa(alturaMapa, larguraMapa);
    fase.nome = "Tumba Negra";
    fase.NumOponentes = numInimigos;
    fase.inimigo = inimigo;

    for (int x = 0; x < numInimigos; ) {
        int i = rand() % alturaMapa, j = rand() % larguraMapa;

        if (fase.mapa.bloco[i][j].caminho == caminho) {
            fase.mapa.bloco[i][j].caminho = Inimig01;
            fase.mapa.bloco[i][j].PonteiroInimigo = &fase.inimigo[x];
            x++;
        }
    }

    return fase;
}

template<typename T>
bool morreu(T criatura) {
    if (criatura.vida <= 0)
        return true;
    else
        return false;
}

template<typename T, typename T2>
T2 Ataque(T atacante, T2 def) {
    def.vida = def.vida - (rand() % (atacante.arma.Dmax - atacante.arma.Dmin + 1) + atacante.arma.Dmin);
    return def;
}

void duelo(Jogador& jogador, Inimigo& inimigo, int& cont) {
    while (!morreu(jogador) && !morreu(inimigo)) {
        jogador = Ataque(inimigo, jogador);
        std::cout << "\n" << inimigo.nome << " te atacou deixando voce com: " << jogador.vida << " de vida" << std::endl;
        inimigo = Ataque(jogador, inimigo);
        std::cout << "Ao mesmo tempo voce ataca e o deixa com: " << inimigo.vida << " de vida" << std::endl << std::endl;
        system(PAUSE);

        if (morreu(jogador)) {
            std::cout << "\n" << jogador.nome << " voce foi derrotado, recolha-se a sua insignificancia" << std::endl;
            std::cout << "FIM DE JOGO\n" << std::endl;
            system(PAUSE);
            break;
        }
        if (morreu(inimigo)) {
            std::cout << "\n" << inimigo.nome << " morreu" << ", voce prossegue..." << std::endl << std::endl;
            cont--;
            system(PAUSE);
        }
    }
}

void Movimentar(Jogador jogador, Fase fase) {

    int EixoX = jogador.posX, EixoY = jogador.posY;
    fase.mapa.bloco[EixoX][EixoY].caminho = Jog01;
    int cont = fase.NumOponentes;

    for (bool loop = true; loop; ) {
        std::cout << "Inimigos (" << cont << " de " << fase.NumOponentes << ")\n\n";
        for (int i = 0; i < fase.mapa.EixoX; ++i) {
            for (int j = 0; j < fase.mapa.EixoY; ++j)
                std::cout << (char)fase.mapa.bloco[i][j].caminho << ' ';
            std::cout << std::endl;
        }
        std::cout << std::endl << "W A S D = para se mover" << std::endl;

        int Ncolun = EixoY, NLinha = EixoX;
        switch (_getch()) {
        case 'a': case 'A': --Ncolun; break;
        case 'd': case 'D': ++Ncolun; break;
        case 's': case 'S': ++NLinha; break;
        case 'w': case 'W': --NLinha; break;
        case 'f': case 'F': loop = false; break;
        default: system(CLEAR);
            system(CLEAR);
        }

        if (loop) {
            NLinha = NLinha < 0 ? NLinha + fase.mapa.EixoX : NLinha % fase.mapa.EixoX;
            Ncolun = Ncolun < 0 ? Ncolun + fase.mapa.EixoY : Ncolun % fase.mapa.EixoY;

            if (fase.mapa.bloco[NLinha][Ncolun].caminho == caminho) {
                std::swap(fase.mapa.bloco[NLinha][Ncolun].caminho, fase.mapa.bloco[EixoX][EixoY].caminho);
                EixoX = NLinha;
                EixoY = Ncolun;
                system(CLEAR);
            }
            else if (fase.mapa.bloco[NLinha][Ncolun].caminho == Inimig01) {
                system(CLEAR);
                std::cout << jogador.nome << " pega sua arma e inicie a batalha contra: ";
                std::cout << fase.mapa.bloco[NLinha][Ncolun].PonteiroInimigo->nome << " (" << fase.mapa.bloco[NLinha][Ncolun].PonteiroInimigo->vida << " de vida)" << std::endl;
                duelo(jogador, *fase.mapa.bloco[NLinha][Ncolun].PonteiroInimigo, cont);
                if (morreu(jogador))
                    loop = false;

                if (cont == 0) {
                    std::cout << "\n \n Voce Sobreviveu, toma aqui seu DollY da Vitoria \n\n\n";
                    system(PAUSE);
                    loop = false; Ncolun;
                }

                std::swap(fase.mapa.bloco[NLinha][Ncolun].caminho, fase.mapa.bloco[EixoX][EixoY].caminho);
                fase.mapa.bloco[EixoX][EixoY].caminho = caminho;
                EixoX = NLinha;
                EixoY = Ncolun;
                system(CLEAR);

            }
            
            else {
                system(CLEAR);
            }
        }
    }
}

int main() {
    setlocale(LC_ALL, "Portuguese");
    srand(time(NULL));
    int l = 0, c = 0;
    int num_inimigos = 5;
    bool Menu = true;
    Jogador jogador;
    Fase fase;
    Inimigo* inimigo;
    int escolha;

    while (Menu == true) {
        system(CLEAR);
        escolhaMenu(escolha);

        switch (escolha) {
        case 1:
            system(CLEAR);
            
            jogador = escolha_jogador();
            inimigo = escolherInimigos(num_inimigos);
            fase = CriarFase(num_inimigos, inimigo, 10, 10);
            Movimentar(jogador, fase);
            break;

        case 3:
            system(CLEAR);
            Menu = false;
            return 0;

        case 2:
            system(CLEAR);
            sobre();
            Menu = false;
            break;

        default:
            system(CLEAR);
            break;
        }
    }
    return 0;
}

