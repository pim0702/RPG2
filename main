#include <iostream>
#include <time.h>
#include <locale.h>
#include <algorithm>
#include <conio.h>
#include <stdlib.h>
#if __linux__ || _POSIX_VERSION
#define CLEAR "clear"
#define PAUSE "read _"
#elif _WIN32 || _WIN64
#define CLEAR "cls"
#define PAUSE "pause"
#endif

void escolhaMenu(int& escolha) {
    std::cout << "*===============================*" << std::endl;
    std::cout << "| B R A S I L  -  S U R V I V E | " << std::endl;
    std::cout << "*===============================*" << std::endl;
    std::cout << "*==============*" << std::endl;
    std::cout << "| 1 -> Jogar   |" << std::endl;
    std::cout << "| 2 -> Sobre   |" << std::endl;
    std::cout << "| 3 -> Sair    |" << std::endl;
    std::cout << "*==============*" << std::endl << std::endl;
    std::cout << "Escolha a opcao desejada -> ";
    std::cin >> escolha;
}

void sobre() {
    std::cout << "*===============================*" << std::endl;
    std::cout << "| B R A S I L  -  S U R V I V E | " << std::endl;
    std::cout << "*===============================*" << std::endl << std::endl;

    std::cout << "*==============================================================*" << std::endl;
    std::cout << "|                                                              |" << std::endl;
    std::cout << "| O jogo Brasil Survive eh um RPG que se situa no Brasil.      |" << std::endl;
    std::cout << "| No decorrer do jogo, voce enfrentara 5 inimigos, cujos podem |" << std::endl;
    std::cout << "| ser observados diariamente em situacoes no Brasil.           |" << std::endl;
    std::cout << "|                                                              |" << std::endl;
    std::cout << "*==============================================================*" << std::endl << std::endl;

    std::cout << "*==========================================*" << std::endl;
    std::cout << "|   Algoritmos e Programacao II - 2022.1   |" << std::endl;
    std::cout << "|                                          |" << std::endl;
    std::cout << "|             Professor:                   |" << std::endl;
    std::cout << "|            Rodrigo Lyra                  |" << std::endl;
    std::cout << "|                                          |" << std::endl;
    std::cout << "|              Alunos:                     |" << std::endl;
    std::cout << "|    Cesar Pereira  e Deborah  Heinig      |" << std::endl;
    std::cout << "*==========================================*" << std::endl << std::endl;
}



const int way = 45, stone = 127, player = 5, enemy = 21;

struct Arma {
    int Dmin;
    int Dmax;
};

struct Jogador {
    std::string nome;
    int posX;
    int posY;
    int vida;
    Arma arma;
};

struct Inimigo {
    std::string nome;
    int vida;
    Arma arma;
};

struct Bloco {
    int caminho;
    Inimigo* pont_inimigo;
    bool CaminhoSim;
    bool FinalSim;
    bool Resultado;
    bool PedraSim;
};

struct Mapa {
    Bloco** bloco;
    int EixoX;
    int EixoY;
};

struct Fase {
    std::string nome;
    Mapa mapa;
    int q_inimigo;
    Inimigo* inimigo;
};

Jogador escolha_jogador() {
    Jogador debora;
    std::cout << "*===============================*" << std::endl;
    std::cout << "Escolha o nome do seu personagem: " << std::endl;
    std::cout << "*===============================*" << std::endl;
    std::cin >> debora.nome;
    system(CLEAR);

    debora.posX = 0;
    debora.posY = 0;
    debora.vida = 150;
    debora.arma.Dmin = 10;
    debora.arma.Dmax = 30;
    return debora;
}

bool MapaOk(Mapa mapa, int EixoY, int EixoX) {

    mapa.bloco[EixoY][EixoX].CaminhoSim = true; //Faz com que o bloco que está rodando seja verificado como "já está rodando"
    //Sempre que o bloco retorna algo, o bloco deixa de "estar rodando"
    //Sempre que o bloco retorna algo, esse retorno é salvo para que o bloco não seja verificado mais de uma vez

    if (mapa.bloco[EixoY][EixoX].FinalSim == true) { //Se o bloco for o final, retorna true
        mapa.bloco[EixoY][EixoX].CaminhoSim = false;
        mapa.bloco[EixoY][EixoX].Resultado = true;
        return true;
    }
    else if (mapa.bloco[EixoY][EixoX].PedraSim == true) { //Se o bloco for uma pedra retorna false
        mapa.bloco[EixoY][EixoX].CaminhoSim = false;
        mapa.bloco[EixoY][EixoX].Resultado = false;
        return false;
    }
    else if (mapa.bloco[EixoY][EixoX].Resultado != 0) { //Se o bloco já teve algum retorno, retorna o Resultadoado já obtido
        mapa.bloco[EixoY][EixoX].CaminhoSim = false;
        if (mapa.bloco[EixoY][EixoX].Resultado == 1)
            return true;
        else
            return false;
    }

   
    //Verifica, na ordem, o blocos adjascentes à direita, baixo, esquerda, e depois em cima
    //Se o bloco retornar verdadeiro, retorna verdadeiro
    if (!mapa.bloco[EixoY][EixoX + 1].CaminhoSim) {
        if (MapaOk(mapa, EixoY, EixoX + 1)) {
            mapa.bloco[EixoY][EixoX].CaminhoSim = false;
            mapa.bloco[EixoY][EixoX].Resultado = 1;
            return true;
        }
    }
    if (!mapa.bloco[EixoY + 1][EixoX].CaminhoSim) {
        if (MapaOk(mapa, EixoY + 1, EixoX)) {
            mapa.bloco[EixoY][EixoX].CaminhoSim = false;
            mapa.bloco[EixoY][EixoX].Resultado = 1;
            return true;
        }
    }
    if (!mapa.bloco[EixoY][EixoX - 1].CaminhoSim) {
        if (MapaOk(mapa, EixoY, EixoX - 1)) {
            mapa.bloco[EixoY][EixoX].CaminhoSim = false;
            mapa.bloco[EixoY][EixoX].Resultado = 1;
            return true;
        }
    }
    if (!mapa.bloco[EixoY - 1][EixoX].CaminhoSim) {
        if (MapaOk(mapa, EixoY - 1, EixoX)) {
            mapa.bloco[EixoY][EixoX].CaminhoSim = false;
            mapa.bloco[EixoY][EixoX].Resultado = 1;
            return true;
        }
    }

    //Se nenhum dos blocos adjascentes retornar verdadeiro, retorna falso
    mapa.bloco[EixoY][EixoX].CaminhoSim = false;
    mapa.bloco[EixoY][EixoX].Resultado = false;
    return false;
}

Mapa CriarMapa(int EixoX, int EixoY) {
    Mapa mapa;

    mapa.EixoX = EixoX;
    mapa.EixoY = EixoY;
    mapa.bloco = new Bloco * [EixoX];

    for (int i = 0; i < EixoX; i++) {
        mapa.bloco[i] = new Bloco[EixoY];
    }
    for (int i = 0; i < EixoX; i++) {
        for (int j = 0; j < EixoY; j++) {
            int n = rand() % 5;
            if (n == 0) {
                mapa.bloco[i][j].caminho = stone;
            }
            else {
                mapa.bloco[i][j].caminho = way;
            }
        }
    }
    mapa.bloco[0][0].caminho = stone;
    MapaOk( mapa, mapa.EixoY, mapa.EixoX);
    return mapa;
}


Inimigo* escolherInimigos(int q_inimigo) {
    Inimigo* p_inimigo = new Inimigo[q_inimigo];
    std::string nomes[5] = { "Golem", "Arara", "Bandido", "Coveiro","Pedreiro" };

    for (int i = 0; i < q_inimigo; i++) {
        p_inimigo[i].nome = nomes[rand() % 5];
        p_inimigo[i].vida = 25 + rand() % 30;
        p_inimigo[i].arma.Dmin = 5 + rand() % 5;
        p_inimigo[i].arma.Dmax = 20 + rand() % 5;
    }

    return p_inimigo;
}

Fase CriarFase(int numInimigos, Inimigo* inimigo, int EixoY_pro_mapa, int EixoX_pro_mapa) {
    Fase fase;

    fase.mapa = CriarMapa(EixoY_pro_mapa, EixoX_pro_mapa);
    fase.nome = "Tumba Negra";
    fase.q_inimigo = numInimigos;
    fase.inimigo = inimigo;

  
    for (int x = 0; x < numInimigos; ) {
        int i = rand() % EixoY_pro_mapa, j = rand() % EixoX_pro_mapa;

        if (fase.mapa.bloco[i][j].caminho == way) {
            fase.mapa.bloco[i][j].caminho = enemy;
            fase.mapa.bloco[i][j].pont_inimigo = &fase.inimigo[x];
            x++;
        }
    }

    return fase;
}

template<typename T>
bool morreu(T criatura) {
    if (criatura.vida <= 0)
        return true;
    else
        return false;
}

template<typename T, typename T2>
T2 Ataque(T atacante, T2 def) {
    def.vida = def.vida - (rand() % (atacante.arma.Dmax - atacante.arma.Dmin + 1) + atacante.arma.Dmin);
    return def;
}

void batalha(Jogador& jogador, Inimigo& inimigo, int& cont) {
    while (!morreu(jogador) && !morreu(inimigo)) {
        jogador = Ataque(inimigo, jogador);
        std::cout << "\n\t" << inimigo.nome << " te atacou deixando voce com: " << jogador.vida << " de vida" << std::endl;
        inimigo = Ataque(jogador, inimigo);
        std::cout << "\tAo mesmo tempo voce ataca e o deixa com: " << inimigo.vida << " de vida" << std::endl << std::endl;
        system(PAUSE);

        if (morreu(jogador)) {
            std::cout << "\n\t" << jogador.nome << " voce morreu." << std::endl;
            std::cout << "\tFIM DE JOGO\n" << std::endl;
            system(PAUSE);
            break;
        }
        if (morreu(inimigo)) {
            std::cout << "\n\t" << inimigo.nome << " morreu " << std::endl << "\t, voce continua sua jornada..." << std::endl << std::endl;
            cont--;
            system(PAUSE);
        }
    }
}

void Movimentar(Jogador jogador, Fase fase) {
    int EixoX = jogador.posX, EixoY = jogador.posY;
    fase.mapa.bloco[EixoX][EixoY].caminho = player;
    int cont = fase.q_inimigo;

    for (bool partida = true; partida; ) {
        std::cout << "Inimigos (" << cont << " de " << fase.q_inimigo << ")\n\n";
        for (int i = 0; i < fase.mapa.EixoX; ++i) {
            for (int j = 0; j < fase.mapa.EixoY; ++j)
                std::cout << (char)fase.mapa.bloco[i][j].caminho << ' ';
            std::cout << std::endl;
        }
        std::cout << std::endl << "W, A, S, D = mover ";

        
        int Ncolun = EixoY, NLinha = EixoX;
        switch (_getch()) {
        case 'a': case 'A': --Ncolun; break;
        case 'd': case 'D': ++Ncolun; break;
        case 's': case 'S': ++NLinha; break;
        case 'w': case 'W': --NLinha; break;
        case 'f': case 'F': partida = false; break;
        default: system(CLEAR);
            system(CLEAR);
        }

         //Enquanto a bool partida for true a gameplay ocorre. Apenas é definida para false caso seja pressionado 2 no menu do jogo ou o jogador vença
        if (partida) {
            NLinha = NLinha < 0 ? NLinha + fase.mapa.EixoX : NLinha % fase.mapa.EixoX;
            Ncolun = Ncolun < 0 ? Ncolun + fase.mapa.EixoY : Ncolun % fase.mapa.EixoY;

            //Esse é o if principal, e nele é usado a função swap que troca dois elementos da matriz, movimentando o player
            if (fase.mapa.bloco[NLinha][Ncolun].caminho == way) {
                std::swap(fase.mapa.bloco[NLinha][Ncolun].caminho, fase.mapa.bloco[EixoX][EixoY].caminho);
                EixoX = NLinha;
                EixoY = Ncolun;
                system(CLEAR);
            }
            else if (fase.mapa.bloco[NLinha][Ncolun].caminho == enemy) {

                //Aqui começa o combate se voce passar por um inimigo
                system(CLEAR);
                std::cout << jogador.nome << " pega sua arma e inicia um batalha contra: ";

                //Utilizamos o operador -> parar acessar o ponteiro diretamente
                std::cout << fase.mapa.bloco[NLinha][Ncolun].pont_inimigo->nome << " (" << fase.mapa.bloco[NLinha][Ncolun].pont_inimigo->vida << " de vida)" << std::endl;

                //Chamada da função batalha, onde passamos por refêrencia o jogador, o ponteiro do inimigos desse bloco e um contador
                batalha(jogador, *fase.mapa.bloco[NLinha][Ncolun].pont_inimigo, cont);

                //Caso o jogador morra, voltamos ao menu principal
                if (morreu(jogador))
                    partida = false;

                //Caso todos os inimigos da fase morram, o jogo termina
                if (cont == 0) {
                    std::cout << "\n \n Voce venceu, parabens por revigorar o Brasil!!!\n\n\n";
                    system(PAUSE);
                    partida = false; Ncolun;
                }

                //Aqui é feita a retirada do inimigo, e a posição fica livre               
                std::swap(fase.mapa.bloco[NLinha][Ncolun].caminho, fase.mapa.bloco[EixoX][EixoY].caminho);
                fase.mapa.bloco[EixoX][EixoY].caminho = way;
                EixoX = NLinha;
                EixoY = Ncolun;
                system(CLEAR);
            }

            else {
                system(CLEAR);
            }
        }
    }
}

int main() {

    setlocale(LC_ALL, "Portuguese");
    srand(time(NULL));

    int l = 0, c = 0;
    //A int abaixo possibilita escolher a quantidade de inimigos (5 é recomendado)
    int num_inimigos = 5;
    bool menu_on = true;
    Jogador jogador;
    Fase fase;
    Inimigo* inimigo;
    int escolha;

    while (menu_on == true) {
        system(CLEAR);
        escolhaMenu(escolha);

        switch (escolha) {
            //O uso de char nesse switch case é possível por causa da função _getch()
        case 1:
            system(CLEAR);

            jogador = escolha_jogador();
            inimigo = escolherInimigos(num_inimigos);
            fase = CriarFase(num_inimigos, inimigo, 30, 30);
            Movimentar(jogador, fase);
            break;

        case 2:
            system(CLEAR);
            sobre();
            menu_on = false;
            break;

        case 3:
            system(CLEAR);
            menu_on = false;
            return 0;

        default:
            system(CLEAR);
            break;
        }
    }
    return 0;
}
