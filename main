#include <iostream>
#include <time.h>
#include <locale.h>
#include <algorithm>
#include <conio.h>
#include <stdlib.h>
#if __linux__ || _POSIX_VERSION
#define CLEAR "clear"
#define PAUSE "read _"
#elif _WIN32 || _WIN64
#define CLEAR "cls"
#define PAUSE "pause"
#endif

void escolhaMenu(int& escolha) {
    std::cout << " Brsail Survive " << std::endl << std::endl;
    std::cout << "1 -> JOGAR" << std::endl;
    std::cout << "2 -> SAIR" << std::endl << std::endl;
    std::cout << "Escolha a opção desejada -> ";
    std::cin >> escolha;
}


//No mapa a variável do caminho é um int e na impressão recebe um cast forçando a ser imprimido como char.
const int way = 45, stone = 127, player = 5, enemy = 21;

struct Arma {
    int Dmin;
    int Dmax;
};

struct Jogador {
    std::string nome;
    int posX;
    int posY;
    int vida;
    Arma arma;
};

struct Inimigo {
    std::string nome;
    int vida;
    Arma arma;
};

struct Bloco {
    int caminho;
    Inimigo* pont_inimigo;
};

struct Mapa {
    Bloco** bloco;
    int EixoX;
    int EixoY;
};

struct Fase {
    std::string nome;
    Mapa mapa;
    int q_inimigo;
    Inimigo* inimigo;
};





Jogador escolha_jogador() {
    Jogador debora;

    std::cout << "Escolha seu nome: ";
    //Esse comando ignora o enter que está no buffer, e não ocorre a quebra de Linha
    std::cin >> debora.nome;
    system(CLEAR);

    debora.posX = 0;
    debora.posY = 0;
    debora.vida = 150;
    debora.arma.Dmin = 10;
    debora.arma.Dmax = 30;
    return debora;
}

//Função que cria um mapa com base em uma matriz alocada dinamicamente
Mapa CriarMapa(int EixoX, int EixoY) {
    Mapa mapa;

    mapa.EixoX = EixoX;
    mapa.EixoY = EixoY;
    mapa.bloco = new Bloco * [EixoX];

    for (int i = 0; i < EixoX; i++) {
        mapa.bloco[i] = new Bloco[EixoY];
    }
    //Aqui a matriz alocada é preenchida com pedras (1 chance em 5) e caminhos livres
    for (int i = 0; i < EixoX; i++) {
        for (int j = 0; j < EixoY; j++) {
            int n = rand() % 5;
            if (n == 0) {
                mapa.bloco[i][j].caminho = stone;
            }
            else {
                mapa.bloco[i][j].caminho = way;
            }
        }
    }
    //A primeira posição é definida como pedra para não cair nenhum inimigo aqui e o player nascer em cima.
    mapa.bloco[0][0].caminho = stone;

    return mapa;
}

//Essa função é um vetor alocado dinamicamente que é preenchida com inimigos aleatórios
Inimigo* escolherInimigos(int q_inimigo) {
    Inimigo* p_inimigo = new Inimigo[q_inimigo];
    std::string nomes[5] = { "Golem", "Arara", "Bandido", "Coveiro","Pedreiro" };

    for (int i = 0; i < q_inimigo; i++) {
        p_inimigo[i].nome = nomes[rand() % 5];
        p_inimigo[i].vida = 25 + rand() % 10;
        p_inimigo[i].arma.Dmin = 5 + rand() % 5;
        p_inimigo[i].arma.Dmax = 15 + rand() % 5;
    }

    return p_inimigo;
}

Fase CriarFase(int numInimigos, Inimigo* inimigo, int alturaMapa, int larguraMapa) {
    Fase fase;

    fase.mapa = CriarMapa(alturaMapa, larguraMapa);
    fase.nome = "Tumba Negra";
    fase.q_inimigo = numInimigos;
    fase.inimigo = inimigo;

    //Aqui preenchemos o mapa de inimigos aleatoriamente
    for (int x = 0; x < numInimigos; ) {
        int i = rand() % alturaMapa, j = rand() % larguraMapa;

        //Se o caminho estiver livre recebe o endereço de um inimigo
        if (fase.mapa.bloco[i][j].caminho == way) {
            fase.mapa.bloco[i][j].caminho = enemy;
            //Aqui é passado o endereço de cada inimigo do vetor para as posições aleatórias da matriz
            fase.mapa.bloco[i][j].pont_inimigo = &fase.inimigo[x];
            x++;
        }
    }

    return fase;
}

template<typename T>
bool morreu(T criatura) {
    if (criatura.vida <= 0)
        return true;
    else
        return false;
}

template<typename T, typename T2>
T2 Ataque(T atacante, T2 def) {
    //Rand entre o dano maximo e o minimo
    def.vida = def.vida - (rand() % (atacante.arma.Dmax - atacante.arma.Dmin + 1) + atacante.arma.Dmin);
    return def;
}

void duelo(Jogador& jogador, Inimigo& inimigo, int& cont) {
    while (!morreu(jogador) && !morreu(inimigo)) {
        jogador = Ataque(inimigo, jogador);
        std::cout << "\n\t" << inimigo.nome << " te atacou deixando voce com: " << jogador.vida << " de vida" << std::endl;
        inimigo = Ataque(jogador, inimigo);
        std::cout << "\tAo mesmo tempo você ataca e o deixa com: " << inimigo.vida << " de vida" << std::endl << std::endl;
        system(PAUSE);

        if (morreu(jogador)) {
            std::cout << "\n\t" << jogador.nome << " você morreu." << std::endl;
            std::cout << "\tFIM DE JOGO\n" << std::endl;
            system(PAUSE);
            break;
        }
        if (morreu(inimigo)) {
            std::cout << "\n\t" << inimigo.nome << " morreu " << std::endl << "\t, você prossegue..." << std::endl << std::endl;
            cont--;
            system(PAUSE);
        }
    }
}

void Movimentar(Jogador jogador, Fase fase) {
    //Aqui é onde o player é colocado no mapa
    int EixoX = jogador.posX, EixoY = jogador.posY;
    fase.mapa.bloco[EixoX][EixoY].caminho = player;
    //Esse contador vai diminuindo, e quando chega a zero abre um portal para sair da fase
    int cont = fase.q_inimigo;

    //Aqui ocorre a impressão principal do mapa
    for (bool mapa_on = true; mapa_on; ) {
        //Esse cout fala quantos inimigos a fase possui, e quantos faltam ser derrotados
        std::cout << "Inimigos (" << cont << " de " << fase.q_inimigo << ")\n\n";
        for (int i = 0; i < fase.mapa.EixoX; ++i) {
            for (int j = 0; j < fase.mapa.EixoY; ++j)
                //Aqui ocorre um cast, e os valores inteiros que definem oque há nos blocos são imprimidos como char
                std::cout << (char)fase.mapa.bloco[i][j].caminho << ' ';
            std::cout << std::endl;
        }
        std::cout << std::endl << "W, A, S, D = mover | F = sair -> ";

        //Aqui é utilizado o _getch() para a mecânica de movimentação
        int Ncolun = EixoY, NLinha = EixoX;
        switch (_getch()) {
        case 'a': case 'A': --Ncolun; break;
        case 'd': case 'D': ++Ncolun; break;
        case 's': case 'S': ++NLinha; break;
        case 'w': case 'W': --NLinha; break;
        case 'f': case 'F': mapa_on = false; break;
        default: system(CLEAR);
            system(CLEAR);
        }

        //Enquanto a bool mapa_on for true a gameplay ocorre. Apenas é definida para false caso seja pressionado F ou o jogador entre no portal
        if (mapa_on) {
            //Esse é um if, else simplificado (se n1 < 0 ocorre a primeira condição, se não for ocorre a segunda)
            NLinha = NLinha < 0 ? NLinha + fase.mapa.EixoX : NLinha % fase.mapa.EixoX;
            Ncolun = Ncolun < 0 ? Ncolun + fase.mapa.EixoY : Ncolun % fase.mapa.EixoY;

            //Esse é o if principal, e nele é usado a função swap da biblioteca conio.h que troca dois elementos da matriz, movimentando o player
            if (fase.mapa.bloco[NLinha][Ncolun].caminho == way) {
                std::swap(fase.mapa.bloco[NLinha][Ncolun].caminho, fase.mapa.bloco[EixoX][EixoY].caminho);
                EixoX = NLinha;
                EixoY = Ncolun;
                system(CLEAR);
            }
            else if (fase.mapa.bloco[NLinha][Ncolun].caminho == enemy) {
                //Aqui ocorre o combate caso tenha um inimigo no caminho
                system(CLEAR);
                std::cout << jogador.nome << " pega sua varinha e inicia um duelo contra: ";
                //Utilizamos o operador -> parar acessar o ponteiro diretamente
                std::cout << fase.mapa.bloco[NLinha][Ncolun].pont_inimigo->nome << " (" << fase.mapa.bloco[NLinha][Ncolun].pont_inimigo->vida << " de vida)" << std::endl;
                //Chamada da função duelo, onde passamos por refêrencia o jogador, o ponteiro do inimigos desse bloco e um contador
                duelo(jogador, *fase.mapa.bloco[NLinha][Ncolun].pont_inimigo, cont);
                //Caso o jogador morra, voltamos ao menu principal
                if (morreu(jogador))
                    mapa_on = false;

                //Caso todos os inimigos da fase morram, é sorteado uma posição do mapa para surgir um portal para a saída
                if (cont == 0) {
                    std::cout << "\n \n Voce venceu jovem Padawan...\n\n\n";
                    system(PAUSE);
                    mapa_on = false; Ncolun;
                }

                //Aqui é feita a retirada do inimigo, e a posição fica livre               
                std::swap(fase.mapa.bloco[NLinha][Ncolun].caminho, fase.mapa.bloco[EixoX][EixoY].caminho);
                fase.mapa.bloco[EixoX][EixoY].caminho = way;
                EixoX = NLinha;
                EixoY = Ncolun;
                system(CLEAR);

                //Caso o jogador caminhe em direção ao portal, ele ganha o jogo e retorna ao menu principal
            }
            
            else {
                system(CLEAR);
            }
        }
    }
}

int main() {
    setlocale(LC_ALL, "Portuguese");
    srand(time(NULL));
    int l = 0, c = 0;
    //A int abaixo possibilida escolher a quantidade de inimigos (5 é recomendado)
    int num_inimigos = 5;
    bool menu_on = true;
    Jogador jogador;
    Fase fase;
    Inimigo* inimigo;
    int escolha;

    while (menu_on == true) {
        system(CLEAR);
        escolhaMenu(escolha);

        switch (escolha) {
            //O uso de char nesse switch case é possível por causa da função _getch()
        case 1:
            system(CLEAR);
            
            jogador = escolha_jogador();
            inimigo = escolherInimigos(num_inimigos);
            fase = CriarFase(num_inimigos, inimigo, 10, 10);
            Movimentar(jogador, fase);
            break;

        case 2:
            system(CLEAR);
            menu_on = false;
            return 0;

        default:
            system(CLEAR);
            break;
        }
    }
    return 0;
}
